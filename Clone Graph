/*
// Definition for a Node.
class Node {
public:
    int val;
    vector<Node*> neighbors;
    Node() {
        val = 0;
        neighbors = vector<Node*>();
    }
    Node(int _val) {
        val = _val;
        neighbors = vector<Node*>();
    }
    Node(int _val, vector<Node*> _neighbors) {
        val = _val;
        neighbors = _neighbors;
    }
};
*/

class Solution {
public:
    unordered_map<Node*,Node*>umap;
    void DFS(Node* node,Node* clone_node){
        for(Node* nbr:node->neighbors){
            if(umap.find(nbr)==umap.end()){
                Node* clone=new Node(nbr->val);
                umap[nbr]=clone;
                clone_node->neighbors.push_back(clone);
                DFS(nbr,clone);
            }else{
                clone_node->neighbors.push_back(umap[nbr]);
            }
        }
    }
    Node* cloneGraph(Node* node) {
        if(node==NULL){
            return NULL;
        }
        umap.clear();
        Node* clone_node=new Node(node->val);
        umap[node]=clone_node;
        DFS(node,clone_node);
        return clone_node;
    }
};
